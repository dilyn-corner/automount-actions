#!/bin/bash

LOG_SNAP_COMMON=${SNAP_COMMON}/auto-install-usb.log

# log to both SNAP_COMMON and the mounted partition
function log(){
  echo -e "`date -Iseconds` ${1}" >> ${LOG_SNAP_COMMON}
  echo -e "`date -Iseconds` ${1}" >> ${LOG_MOUNTED}
}

# log with echo to both SNAP_COMMON and the mounted partition
function logecho(){
  echo -e "${1}"
  log "${1}"
}

# Outter loop ensures that the process continues after 
# insertion of USB with inapplicable content (for example no asserts and snaps)
# causes break on inner loop
while true
do
  # create watched file just to be sure
  [[ -n ${WATCHED} ]] && touch ${WATCHED}

  while true;
  do
    sleep 5
    #WATCHED is touched on automount and its content is the mount point
    ${SNAP}/usr/bin/inotifywait -e open ${WATCHED}

    #MNT is the mountpoint of the USB drive
    MNT=`cat ${WATCHED}`

    LOG_MOUNTED=${MNT}/auto-install-usb.log

    echo -e "Mount signal file ${WATCHED} touched. Mountpoint is ${MNT}."
    # We only start logging to *files* after the mount device is known to have
    # at least one assert file and one snap file, our use case of interest
    # so for now store up the mesesage to be logged to file later
    MSG="\tMount signal file ${WATCHED} touched.\n\tMountpoint is ${MNT}.\n"

    # find any *.assert files
    ASSERTS=`ls "${MNT}" | grep assert$`

    # stop if no assert files found
    [[ -z $ASSERTS ]] && break

    #log assert files found
    for ANASSERT in ${ASSERTS}; do
      #strip whitespace
      ANASSERT=`echo ${ANASSERT} | sed 's/\s*$//g'`
      echo -e "\tAssert: ${ANASSERT} found."
      MSG="${MSG}Assert: ${ANASSERT} found."
    done

    # find any *.snap files
    SNAPS=`ls "${MNT}" | grep snap$`

    # stop if no snap files found
    [[ -z $SNAPS ]] && break

    # We are now in a valid use case, the mount point has *.assert and *.snap
    # so write log messages
    log "${MSG}"

    for ASNAP in ${SNAPS}; do
      #strip whitespace
      ASNAP=`echo ${ASNAP} | sed 's/\s*$//g'`
      logecho "\tSnap file ${ASNAP} found."
    done

    #Make a datetime
    DT=`date -Iseconds`

    for ASSERT in ${ASSERTS}; do
      ASSERT_RES_FILE="${SNAP_COMMON}/${ASSERT}_result.${DT}"
      # Ack the assert:
      ${SNAP}/usr/bin/curl -o "${ASSERT_RES_FILE}" -X POST -sS --unix-socket /run/snapd.socket http://localhost/v2/assertions --data-binary "@${MNT}/${ASSERT}"
      grep -Iq '"status":"OK"' ${ASSERT_RES_FILE}
      if [[ "$?" == "0" ]]; then
        logecho "Ack of ${ASSERT} succeeded"
      else
        logecho "ERROR: Ack of ${ASSERT} failed. This installation iteration is STOPPING."
        FAILED=0
      fi
    done

    # ack of assertion failed, so quit
    [[ ${FAILED} ]] && break

    INSTALL_SUCCEEDED=0
    for ASNAP in ${SNAPS}; do
      CHANNEL_SUCCEEDED=0
      SNAP_RES_FILE="${SNAP_COMMON}/${ASNAP}_result.${DT}"
      # install the snap
      ${SNAP}/usr/bin/curl -o "${SNAP_RES_FILE}" -sS --unix-socket /run/snapd.socket --form snap=@${MNT}/${ASNAP} http://localhost/v2/snaps
      grep -Iq '"status":"Accepted"' ${SNAP_RES_FILE}
      if [[ "$?" == "0" ]]; then
        logecho "Install of ${ASNAP} succeeded"
        # set snapd to explicitly follow stable for this snap
        SNAPNAME=`echo ${ASNAP} | cut -f1 -d_`
        # keep trying to set the channel to stable because it may take some time if a snap change is in process
        # give up after 14 loops, where each loop sleeps twice as long as the previous
        # where 14 loops takes 19.1 minutes	
        IDX=0
        SLEEP=2
        CHANNEL_SUCCEEDED=1
        while [ $IDX -lt 14 ]; do
          sleep $SLEEP
          ${SNAP}/usr/bin/curl -X POST -o "${SNAP_RES_FILE}.channel" --header "Content-Type: application/json"  --data '{"action":"switch","channel":"stable"}' -sS --unix-socket /run/snapd.socket http://localhost/v2/snaps/${SNAPNAME}
          grep -Iq '"status":"Accepted"' ${SNAP_RES_FILE}.channel
          if [[ "$?" == "0" ]]; then
            logecho "${SNAPNAME} is now following stable"
            CHANNEL_SUCCEEDED=0
            break
          fi
          let IDX=$IDX+1
          let SLEEP=${SLEEP}*2
        done
        [[ ! ${CHANNEL_SUCCEEDED} ]] && logecho "WARNING: Unable to configure ${SNAPNAME} channel"
      else
        INSTALL_SUCCEEDED=1
        logecho "Install of ${ASNAP} failed. This installation iteration is STOPPING."
        break
      fi
    done
    if [ $INSTALL_SUCCEEDED -eq 0 ]; then
      logecho "AUTO INSTALL RESULT: All snaps installed. Ending"
    else
      logecho "AUTO INSTALL RESULT: Not all snaps installed. Process incomplete." 
    fi
  done
done
